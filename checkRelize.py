import telebot
import requests
import sqlite3
import threading
import time
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = 'BLABLABLABLABLABLABLABLABLABL'
CHECK_INTERVAL = 300  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

bot = telebot.TeleBot(API_TOKEN)


# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –∏ –ø–æ–¥–ø–∏—Å–æ–∫
def init_db():
    conn = sqlite3.connect('users.db', check_same_thread=False)
    cursor = conn.cursor()

    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute('''CREATE TABLE IF NOT EXISTS users 
                      (chat_id INTEGER PRIMARY KEY,
                       last_notified_status TEXT)''')

    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ is_subscribed
    cursor.execute("PRAGMA table_info(users)")
    columns = [column[1] for column in cursor.fetchall()]

    if 'is_subscribed' not in columns:
        try:
            cursor.execute("ALTER TABLE users ADD COLUMN is_subscribed BOOLEAN DEFAULT FALSE")
        except sqlite3.OperationalError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏: {e}")

    conn.commit()
    return conn, cursor


db_conn, db_cursor = init_db()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
def convert_utc_to_ekb(utc_time_str):
    utc_time = datetime.strptime(utc_time_str, "%Y-%m-%d %H:%M:%S.%f%z")
    ekb_time = utc_time + timedelta(hours=5)
    return ekb_time.strftime("%d.%m.%Y %H:%M:%S")


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ª–∏–∑–∞
def get_release_status(auth_token):
    try:
        res = requests.get(
            url='https://api.raveon.net/catalogue/v2/get/albums/my',
            headers={'Authorization': auth_token}
        )
        el = res.json()
        album = el["data"]['albums'][0]['album_serialized']
        return {
            'title': album['title'],
            'current_status': album['status']["current"],
            'history': album['status']["history"]
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return None


# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
def authenticate():
    url = "https://api.raveon.net/auth/user/get/token"
    form_data = {"email": "HAHAHAHAHAHAHAHAHAHAHAH", "password": "AHAHAHAHAHAHAHAHAHAH"}
    response = requests.post(url, data=form_data)
    if response.status_code == 201:
        return response.json()['data']['serialized_session']['token']
    raise Exception('Authentication failed')


# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
def notify_users(new_status, title):
    db_cursor.execute("SELECT chat_id FROM users WHERE is_subscribed = TRUE")
    for (chat_id,) in db_cursor.fetchall():
        try:
            bot.send_message(
                chat_id,
                f"üîî –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ª–∏–∑–∞!\n\n"
                f"–†–µ–ª–∏–∑: {title}\n"
                f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}"
            )
            db_cursor.execute(
                "UPDATE users SET last_notified_status = ? WHERE chat_id = ?",
                (new_status, chat_id)
            )
            db_conn.commit()
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {chat_id}: {e}")


# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
def check_status_periodically():
    last_status = None
    while True:
        try:
            auth_token = authenticate()
            status_data = get_release_status(auth_token)

            if status_data and (last_status and status_data['current_status'] != last_status):
                notify_users(status_data['current_status'], status_data['title'])
                last_status = status_data['current_status']

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

        time.sleep(CHECK_INTERVAL)


# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
threading.Thread(target=check_status_periodically, daemon=True).start()


# –ö–æ–º–∞–Ω–¥–∞ /start (–±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏)
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn_check = telebot.types.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å')
    btn_subscribe = telebot.types.KeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π')
    markup.add(btn_check, btn_subscribe)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (—Å is_subscribed=FALSE)
    db_cursor.execute(
        "INSERT OR IGNORE INTO users (chat_id, is_subscribed) VALUES (?, FALSE)",
        (message.chat.id,)
    )
    db_conn.commit()

    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π"
@bot.message_handler(func=lambda message: message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π')
def manage_subscription(message):
    db_cursor.execute(
        "SELECT is_subscribed FROM users WHERE chat_id = ?",
        (message.chat.id,)
    )
    subscription_status = db_cursor.fetchone()

    if subscription_status is None:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
        return

    is_subscribed = subscription_status[0]

    markup = telebot.types.InlineKeyboardMarkup()
    if is_subscribed:
        markup.add(telebot.types.InlineKeyboardButton(
            "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏",
            callback_data="unsubscribe")
        )
        text = "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n–•–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è?"
    else:
        markup.add(telebot.types.InlineKeyboardButton(
            "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É",
            callback_data="subscribe")
        )
        text = "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è?"

    bot.send_message(message.chat.id, text, reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "subscribe":
        db_cursor.execute(
            "UPDATE users SET is_subscribed = TRUE WHERE chat_id = ?",
            (call.message.chat.id,)
        )
        db_conn.commit()
        bot.answer_callback_query(call.id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
    elif call.data == "unsubscribe":
        db_cursor.execute(
            "UPDATE users SET is_subscribed = FALSE WHERE chat_id = ?",
            (call.message.chat.id,)
        )
        db_conn.commit()
        bot.answer_callback_query(call.id, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

    # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )


# –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å')
def manual_check(message):
    try:
        auth_token = authenticate()
        status_data = get_release_status(auth_token)

        if status_data:
            history = "\n".join(
                f"[{convert_utc_to_ekb(s['added_at'])}] –°—Ç–∞—Ç—É—Å: {s['status']}"
                for s in status_data['history']
            )

            bot.send_message(
                message.chat.id,
                f"–†–µ–ª–∏–∑: {status_data['title']}\n\n"
                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_data['current_status']}\n\n"
                f"–ò—Å—Ç–æ—Ä–∏—è:\n{history}"
            )
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    db_cursor.execute("SELECT chat_id FROM users WHERE is_subscribed = TRUE")
    for (chat_id,) in db_cursor.fetchall():
        try:
            bot.send_message(chat_id, "–ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
        except:
            print('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ')

    bot.polling()
